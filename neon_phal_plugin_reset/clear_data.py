# NEON AI (TM) SOFTWARE, Software Development Kit & Application Framework
# All trademark and other rights reserved by their respective owners
# Copyright 2008-2022 Neongecko.com Inc.
# Contributors: Daniel McKnight, Guy Daniels, Elon Gasper, Richard Leeds,
# Regina Bloomstine, Casimiro Ferreira, Andrii Pernatii, Kirill Hrymailo
# BSD-3 License
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
# OR PROFITS;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE,  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
import shutil
from enum import IntEnum
from os.path import expanduser, join

from mycroft_bus_client import MessageBusClient
from mycroft_bus_client.message import Message
from neon_utils.user_utils import update_user_profile
from neon_utils.configuration_utils import get_user_config_from_mycroft_conf
from ovos_utils.log import LOG


class UserData(IntEnum):
    CACHES = 0
    PROFILE = 1
    ALL_TR = 2
    CONF_LIKES = 3
    CONF_DISLIKES = 4
    ALL_DATA = 5
    ALL_MEDIA = 6
    ALL_UNITS = 7
    ALL_LANGUAGE = 8
    LOGS = 9


def clear_user_data(data_type: UserData, message: Message,
                    bus: MessageBusClient):
    """
    Clears the requested data_type for the specified user.
    :param data_type: UserData to be cleared
    :param message: Message with profile context for the requested user
    :param bus: MessageBusClient instance to use to emit profile update
    """
    default_config = get_user_config_from_mycroft_conf()
    if data_type == UserData.ALL_DATA:
        update_user_profile(default_config, message, bus)
        clear_local_files(True, True, True)
        return
    if data_type == UserData.CONF_LIKES:
        # TODO: Clear likes from transcripts
        return
    if data_type == UserData.CONF_DISLIKES:
        # TODO: Clear relevant transcripts
        updated_config = {"brands": {"ignored_brands": {}}}
        update_user_profile(updated_config, message, bus)
        return
    if data_type == UserData.ALL_TR:
        # TODO: Clear transcripts
        return
    if data_type == UserData.PROFILE:
        updated_config = default_config["user"]
        update_user_profile({"user": updated_config}, message, bus)
        return
    if data_type == UserData.CACHES:
        clear_local_files(do_cache=True)
        return
    if data_type == UserData.ALL_UNITS:
        updated_config = default_config["units"]
        update_user_profile({"units": updated_config}, message, bus)
        return
    if data_type == UserData.ALL_MEDIA:
        clear_local_files(do_media=True)
        return
    if data_type == UserData.ALL_LANGUAGE:
        updated_config = default_config["speech"]
        update_user_profile({"speech": updated_config}, message, bus)
        return
    if data_type == UserData.LOGS:
        clear_local_files(do_logs=True)
        return


def clear_local_files(do_logs: bool = False, do_cache: bool = False,
                      do_media: bool = False):
    """
    Handle removal of local filesystem files.
    :param do_logs: If true, remove logs from the LOG base_path
    :param do_cache: If true, remove cache files from the configured xdg_base
    :param do_media: If true, remove media generated by skills and other plugins
    """
    if do_logs:
        logs_dir = LOG.base_path
        LOG.info(f"Removing log directory: {logs_dir}")
        shutil.rmtree(logs_dir)
    if do_cache:
        from ovos_utils.xdg_utils import xdg_cache_home
        from ovos_config.meta import get_xdg_base
        cache_dir = join(xdg_cache_home(), get_xdg_base())
        LOG.info(f"Removing cache directory: {cache_dir}")
        shutil.rmtree(cache_dir)
    if do_media:
        # TODO: Get from config or emit for skills to handle?
        LOG.warning(f"Removing media")
        pictures_dir = expanduser("~/Pictures/Neon")
        shutil.rmtree(pictures_dir)
        videos_dir = expanduser("~/Videos/Neon")
        shutil.rmtree(videos_dir)